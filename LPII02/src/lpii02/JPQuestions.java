/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lpii02;

import Components.ButtonColumn;
import LPII02.Business.Services.DifficultyBusiness;
import LPII02.Business.Services.MatterBusiness;
import LPII02.Business.Services.QuestionBusiness;
import LPII02.Domain.Entities.Difficulty;
import LPII02.Domain.Entities.Matter;
import LPII02.Domain.Entities.Question;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gustavo
 */
public class JPQuestions extends javax.swing.JPanel {

    private QuestionBusiness _qBusiness = new QuestionBusiness();
    private BufferedImage _image = null;
    private String _imgType = null;
    private int _page = 1;
    private int _qtdPerPage = 10;
    private boolean _loadPassed = false;
    private Question _question = null;

    /**
     * Creates new form JPQuestions
     */
    public JPQuestions() {
        initComponents();

        this.grQuestions.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                valueRowChanged(e);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfImage = new javax.swing.JFileChooser();
        jpScroll = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taEnunciated = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taAnwser = new javax.swing.JTextArea();
        cbMatters = new javax.swing.JComboBox<Matter>();
        cbDifficulties = new javax.swing.JComboBox<Difficulty>();
        jSeparator1 = new javax.swing.JSeparator();
        btnFindImage = new javax.swing.JButton();
        txtFileImage = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        grQuestions = new javax.swing.JTable();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnImgPreview = new javax.swing.JButton();
        btnAlternatives = new javax.swing.JButton();

        jfImage.setApproveButtonText("OK");
        jfImage.setApproveButtonToolTipText("OK");
        jfImage.setDialogTitle("Selecione uma imagem");
        FileFilter imageFilter = new FileNameExtensionFilter(
            "Image files", ImageIO.getReaderFileSuffixes());

        jfImage.setFileFilter(imageFilter);

        jpScroll.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                jpScrollHierarchyChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel1.setText("Matéria:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel2.setText("Dificuldade:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel3.setText("Enunciado:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel4.setText("Resposta:");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel5.setText("Imagem (Auxiliar):");

        taEnunciated.setColumns(20);
        taEnunciated.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        taEnunciated.setRows(5);
        jScrollPane1.setViewportView(taEnunciated);

        taAnwser.setColumns(20);
        taAnwser.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        taAnwser.setRows(5);
        jScrollPane2.setViewportView(taAnwser);

        cbMatters.setFont(new java.awt.Font("Century Gothic", 0, 12));

        cbDifficulties.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnFindImage.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnFindImage.setText("Procurar");
        btnFindImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindImageActionPerformed(evt);
            }
        });

        txtFileImage.setEditable(false);
        txtFileImage.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        grQuestions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Matéria", "Dificuldade", "Enunciado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(grQuestions);

        btnLast.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnLast.setText(">>");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnNext.setText(">");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnBack.setText("<");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnFirst.setText("<<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnNew.setText("Nova");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnInsert.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnInsert.setText("Cadastrar");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnEdit.setText("Editar");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnDelete.setText("Excluir");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnImgPreview.setText("jButton1");
        btnImgPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImgPreviewActionPerformed(evt);
            }
        });

        btnAlternatives.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnAlternatives.setText("Alternativas");
        btnAlternatives.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlternativesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpScrollLayout = new javax.swing.GroupLayout(jpScroll);
        jpScroll.setLayout(jpScrollLayout);
        jpScrollLayout.setHorizontalGroup(
            jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpScrollLayout.createSequentialGroup()
                .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpScrollLayout.createSequentialGroup()
                        .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpScrollLayout.createSequentialGroup()
                                    .addGap(67, 67, 67)
                                    .addComponent(jLabel1))
                                .addGroup(jpScrollLayout.createSequentialGroup()
                                    .addGap(52, 52, 52)
                                    .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addComponent(cbMatters, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbDifficulties, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jpScrollLayout.createSequentialGroup()
                            .addComponent(btnNew)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnInsert)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnEdit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDelete)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnAlternatives))
                        .addGroup(jpScrollLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnFindImage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtFileImage, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(3, 3, 3)
                            .addComponent(btnImgPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpScrollLayout.createSequentialGroup()
                        .addComponent(btnFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLast)))
                .addContainerGap())
        );
        jpScrollLayout.setVerticalGroup(
            jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpScrollLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jpScrollLayout.createSequentialGroup()
                        .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpScrollLayout.createSequentialGroup()
                                .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(cbMatters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(cbDifficulties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)
                                .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnFindImage, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFileImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnImgPreview)
                                    .addComponent(jLabel5)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnLast)
                                .addComponent(btnNext)
                                .addComponent(btnBack))
                            .addComponent(btnFirst)
                            .addGroup(jpScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnNew)
                                .addComponent(btnInsert)
                                .addComponent(btnEdit)
                                .addComponent(btnDelete))
                            .addComponent(btnAlternatives))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            List<Question> questions = this._qBusiness.get();

            this._page = (int) Math.round(questions.size() / Double.parseDouble(this._qtdPerPage + ""));
            this.loadTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        this.clearControls();
    }//GEN-LAST:event_btnNewActionPerformed

    private void jpScrollHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jpScrollHierarchyChanged
        if (this._loadPassed) {
            return;
        }

        try {
            this.loadMatters();
            this.loadDifficulties();
            this.loadTable();

            this._loadPassed = true;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    "Ocorreu um erro ao carregar os dados necessários, tente novamente.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jpScrollHierarchyChanged

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        try {
            Question model = this._qBusiness.getInstance();

            model.setMatter((Matter) this.cbMatters.getSelectedItem());
            model.setDifficulty((Difficulty) this.cbDifficulties.getSelectedItem());
            model.setAnswer(this.taAnwser.getText());
            model.setEnunciated(this.taEnunciated.getText());
            model.setInsertDate(new Date());

            if (this._image != null) {
                ByteArrayOutputStream outStream = new ByteArrayOutputStream();
                ImageIO.write(this._image, this._imgType, outStream);
                byte[] bytes = outStream.toByteArray();

                model.setImage(bytes);
            }

            this._qBusiness.insert(model);

            //reload table...
            this.loadTable();

            //reset...
            this.clearControls();

            //message success...
            JOptionPane.showMessageDialog(
                    null,
                    "Cadastro efetuado com sucesso!",
                    "Info.",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnFindImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindImageActionPerformed
        if (this.jfImage.showOpenDialog(null) == jfImage.APPROVE_OPTION) {
            File file = this.jfImage.getSelectedFile();

            if (file != null) {
                try {
                    String[] parts = file.getPath().split("[.]");

                    this._imgType = parts[parts.length - 1];
                    this._image = ImageIO.read(file);
                    this.txtFileImage.setText(file.getPath());
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(
                            null,
                            "Ocorreu um erro ao ler a imagem, tente novamente.",
                            "Erro",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                this._image = null;
                this._imgType = null;
            }
        }
    }//GEN-LAST:event_btnFindImageActionPerformed

    private void btnImgPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImgPreviewActionPerformed
        if (this._image != null) {
            JFrame frame = new JFrame();
            JPImage pImage = new JPImage(this._image);
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

            frame.setLayout(new BorderLayout());
            frame.add(pImage, BorderLayout.CENTER);
            frame.pack();
            frame.setLocation(dim.width / 2 - frame.getSize().width / 2, dim.height / 2 - frame.getSize().height / 2);
            frame.setVisible(true);
        }
    }//GEN-LAST:event_btnImgPreviewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        try {
            if (this._question == null) {
                JOptionPane.showMessageDialog(
                        null,
                        "Nenhuma questão foi selecionada",
                        "Atenção",
                        JOptionPane.WARNING_MESSAGE);

                return;
            }

            this._question.setMatter((Matter) this.cbMatters.getSelectedItem());
            this._question.setDifficulty((Difficulty) this.cbDifficulties.getSelectedItem());
            this._question.setAnswer(this.taAnwser.getText());
            this._question.setEnunciated(this.taEnunciated.getText());

            if (this._image != null && this._imgType != null) {
                ByteArrayOutputStream outStream = new ByteArrayOutputStream();
                ImageIO.write(this._image, this._imgType, outStream);
                byte[] bytes = outStream.toByteArray();

                this._question.setImage(bytes);
            }

            this._qBusiness.update(this._question);

            //reload table...
            this.loadTable();

            //reset...
            this.clearControls();

            //message success...
            JOptionPane.showMessageDialog(
                    null,
                    "Alteração efetuada com sucesso!",
                    "Info.",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        List<Question> questions = this._qBusiness.get();
        int maxPage = (int) Math.round(questions.size() / Double.parseDouble(this._qtdPerPage + ""));

        if (this._page >= maxPage) {
            return;
        }

        this._page++;

        try {
            this.loadTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        if (this._page == 1) {
            return;
        }

        this._page--;

        try {
            this.loadTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        if (this._page == 1) {
            return;
        }

        this._page = 1;

        try {
            this.loadTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            if (this._question == null) {
                JOptionPane.showMessageDialog(
                        null,
                        "Nenhuma questão foi selecionada",
                        "Atenção",
                        JOptionPane.WARNING_MESSAGE);

                return;
            }

            if (JOptionPane.showConfirmDialog(
                    this,
                    "Deseja realmente excluir a questão?",
                    "Confirmação",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == 0) {

                //deleting model...
                this._qBusiness.delete(this._question);

                //reset...
                this.clearControls();

                //load table...
                this.loadTable();

                //message success...
                JOptionPane.showMessageDialog(
                        null,
                        "Exclusão efetuada com sucesso!",
                        "Info.",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAlternativesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlternativesActionPerformed
        if (this._question == null) {
            JOptionPane.showMessageDialog(
                    null,
                    "Nenhuma questão selecionada.",
                    "Atenção",
                    JOptionPane.WARNING_MESSAGE);

            return;
        }

        JFrame frame = new JFrame();
        JPAlternative pAlts = new JPAlternative(this._question);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        frame.setLayout(new BorderLayout());
        frame.add(pAlts, BorderLayout.CENTER);
        frame.pack();

        frame.setLocation(dim.width / 2 - frame.getSize().width / 2, dim.height / 2 - frame.getSize().height / 2);
        frame.setVisible(true);
    }//GEN-LAST:event_btnAlternativesActionPerformed

    private void clearControls() {
        this.cbMatters.setSelectedIndex(0);
        this.cbDifficulties.setSelectedIndex(0);
        this.taEnunciated.setText("");
        this.taAnwser.setText("");
        this.txtFileImage.setText("");
        this._image = null;
        this._imgType = null;
        this._question = null;
    }

    private void loadTable() {
        List<Question> questions = this._qBusiness.get();

        if (questions.size() > this._qtdPerPage) {
            questions = questions.subList((this._page - 1) * this._qtdPerPage, this._qtdPerPage);
        }

        if (questions != null) {
            DefaultTableModel dtm = (DefaultTableModel) this.grQuestions.getModel();

            while (dtm.getRowCount() > 0) {
                dtm.removeRow(0);
            }

            for (Question q : questions) {
                dtm.addRow(new Object[]{
                    q.getId(),
                    q.getMatter().getName(),
                    q.getDifficulty().getDescription(),
                    q.getEnunciated()
                });
            }
        }
    }

    private void loadMatters() throws IllegalAccessException, InstantiationException {
        MatterBusiness matterBusiness = new MatterBusiness();
        List<Matter> matters = new ArrayList<Matter>();
        Matter def = matterBusiness.getInstance();

        def.setId(0);
        def.setName("Selecione");

        matters.add(def);
        matters.addAll(matterBusiness.get());

        DefaultComboBoxModel<Matter> model = new DefaultComboBoxModel<Matter>(matters.toArray(new Matter[]{}));
        this.cbMatters.setModel(model);
    }

    private void loadDifficulties() throws IllegalAccessException, InstantiationException {
        DifficultyBusiness difBusiness = new DifficultyBusiness();
        List<Difficulty> diffs = new ArrayList<Difficulty>();
        Difficulty def = difBusiness.getInstance();

        def.setId(0);
        def.setDescription("Selecione");

        diffs.add(def);
        diffs.addAll(difBusiness.get());

        DefaultComboBoxModel<Difficulty> model = new DefaultComboBoxModel<Difficulty>(diffs.toArray(new Difficulty[]{}));
        this.cbDifficulties.setModel(model);
    }

    private void valueRowChanged(ListSelectionEvent e) {
        if (this.grQuestions.getSelectedRows() == null
                || this.grQuestions.getSelectedRows().length == 0) {
            return;
        }
        int selectedRow = this.grQuestions.getSelectedRows()[0];
        this._question = this._qBusiness.get(Integer.parseInt(this.grQuestions.getValueAt(selectedRow, 0).toString()));

        if (this._question != null) {
            this.txtFileImage.setText("Carregamento via Base de Dados");
            this.taAnwser.setText(this._question.getAnswer());
            this.taEnunciated.setText(this._question.getEnunciated());
            ComboBoxModel<Matter> cbMatModel = this.cbMatters.getModel();
            ComboBoxModel<Difficulty> cbDifModel = this.cbDifficulties.getModel();
            int i = 0;

            for (; i < cbMatModel.getSize(); i++) {
                Matter mi = cbMatModel.getElementAt(i);

                if (mi.getId() == this._question.getMatter().getId()) {
                    this.cbMatters.setSelectedIndex(i);
                    break;
                }
            }

            for (i = 0; i < cbDifModel.getSize(); i++) {
                Difficulty di = cbDifModel.getElementAt(i);

                if (di.getId() == this._question.getDifficulty().getId()) {
                    this.cbDifficulties.setSelectedIndex(i);
                    break;
                }
            }

            if (this._question.getImage() != null) {
                try {
                    this._image = ImageIO.read(new ByteArrayInputStream(this._question.getImage()));
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(
                            null,
                            ex.getMessage(),
                            "Ocorreu um erro ao montar a imagem...",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlternatives;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFindImage;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnImgPreview;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JComboBox<Difficulty> cbDifficulties;
    private javax.swing.JComboBox<Matter> cbMatters;
    private javax.swing.JTable grQuestions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JFileChooser jfImage;
    private javax.swing.JPanel jpScroll;
    private javax.swing.JTextArea taAnwser;
    private javax.swing.JTextArea taEnunciated;
    private javax.swing.JTextField txtFileImage;
    // End of variables declaration//GEN-END:variables
}
